typedef_name :
ID
namespace_name :
original_namespace_name
namespace_alias
original_namespace_name :
ID
namespace_alias :
ID
class_name :
ID
simple_template_id
enum_name :
ID
template_name :
ID

translation_unit :
declaration_seq

primary_expression :
literal
this
( expression )
id_expression
lambda_expression
fold_expression
id_expression :
unqualified_id
qualified_id
unqualified_id :
ID
operator_function_id
conversion_function_id
literal_operator_id
~ class_name
~ decltype_specifier
template_id
qualified_id :
nested_name_specifier template opt unqualified_id
nested_name_specifier :
::
type_name ::
namespace_name ::
decltype_specifier ::
nested_name_specifier ID ::
nested_name_specifier template opt simple_template_id ::
lambda_expression :
lambda_introducer lambda_declarator opt compound_statement
lambda_introducer :
[ lambda_capture opt ]
lambda_capture :
capture_default
capture_list
capture_default , capture_list
capture_default :
&=
capture_list :
capture ... opt
capture_list , capture ... opt
capture :
simple_capture
init_capture
simple_capture :
ID
& ID
this
init_capture :
ID initializer
& ID initializer
lambda_declarator :
( parameter_declaration_clause ) mutable opt
exception_specification opt attribute_specifier_seq opt trailing_return_type opt
fold_expression :
( cast_expression fold_operator ... )
( ... fold_operator cast_expression )
( cast_expression fold_operator ... fold_operator cast_expression )
fold_operator :
+
-
*
/
%
^
&
|
<<
>>
+=
-=
*=
/=
%=
^=
&=
|=
<<=
>>=
=
==
!=
<
>
<=
>=
&&
||
,
.*
->*
postfix_expression :
primary_expression
simple_type_specifier ( expression_list opt )
typename_specifier ( expression_list opt )
simple_type_specifier braced_init_list
typename_specifier braced_init_list
dynamic_cast < type_id > ( expression )
static_cast < type_id > ( expression )
reinterpret_cast < type_id > ( expression )
const_cast < type_id > ( expression )
typeid ( expression )
typeid ( type_id )
postfix_expression [ expression ]
postfix_expression [ braced_init_list ]
postfix_expression ( expression_list opt )
postfix_expression . template opt id_expression
postfix_expression -> template opt id_expression
postfix_expression . pseudo_destructor_name
postfix_expression -> pseudo_destructor_name
postfix_expression ++
postfix_expression -- 
expression_list :
initializer_list
pseudo_destructor_name :
nested_name_specifier opt type_name :: ~ type_name
nested_name_specifier template simple_template_id :: ~ type_name
~ type_name
~ decltype_specifier
unary_expression :
postfix_expression
++ cast_expression
-- cast_expression
unary_operator cast_expression
sizeof ( type_id )
sizeof ... ( ID )
alignof ( type_id )
noexcept_expression
new_expression
delete_expression
sizeof unary_expression
unary_operator :
*
&
+
-
!
~
new_expression :
:: opt new new_placement opt new_type_id new_initializer opt
:: opt new new_placement opt ( type_id ) new_initializer opt
new_placement :
( expression_list )
new_type_id :
type_specifier_seq
type_specifier_seq new_declarator
new_declarator :
ptr_operator new_declarator opt
noptr_new_declarator
noptr_new_declarator :
[ expression ] attribute_specifier_seq opt
noptr_new_declarator [ constant_expression ] attribute_specifier_seq opt
new_initializer :
( expression_list opt )
braced_init_list
delete_expression :
:: opt delete cast_expression
:: opt delete [ ] cast_expression
noexcept_expression :
noexcept ( expression )
cast_expression :
unary_expression
( type_id ) cast_expression
pm_expression :
cast_expression
pm_expression .* cast_expression
pm_expression ->* cast_expression
multiplicative_expression :
pm_expression
multiplicative_expression * pm_expression
multiplicative_expression / pm_expression
multiplicative_expression % pm_expression
additive_expression :
multiplicative_expression
additive_expression + multiplicative_expression
additive_expression - multiplicative_expression
shift_expression :
additive_expression
shift_expression << additive_expression
shift_expression >> additive_expression
relational_expression :
shift_expression
relational_expression < shift_expression
relational_expression > shift_expression
relational_expression <= shift_expression
relational_expression >= shift_expression
equality_expression :
relational_expression
equality_expression == relational_expression
equality_expression != relational_expression
and_expression :
equality_expression
and_expression & equality_expression
exclusive_or_expression :
and_expression
exclusive_or_expression ^ and_expression
inclusive_or_expression :
exclusive_or_expression
inclusive_or_expression | exclusive_or_expression
logical_and_expression :
inclusive_or_expression
logical_and_expression && inclusive_or_expression
logical_or_expression :
logical_and_expression
logical_or_expression || logical_and_expression
conditional_expression :
logical_or_expression
logical_or_expression ? expression : assignment_expression
throw_expression :
throw assignment_expression opt
assignment_expression :
conditional_expression
logical_or_expression assignment_operator initializer_clause
throw_expression
assignment_operator :
=
*=
/=
%=
+=
-=
>>=
<<=
&=
^=
|=
expression :
assignment_expression
expression , assignment_expression
constant_expression :
conditional_expression

statement :
labeled_statement
attribute_specifier_seq opt expression_statement
attribute_specifier_seq opt compound_statement
attribute_specifier_seq opt selection_statement
attribute_specifier_seq opt iteration_statement
attribute_specifier_seq opt jump_statement
declaration_statement
attribute_specifier_seq opt try_block
labeled_statement :
attribute_specifier_seq opt ID : statement
attribute_specifier_seq opt case constant_expression : statement
attribute_specifier_seq opt default : statement
expression_statement :
expression opt ;
compound_statement :
{ statement_seq opt }
statement_seq :
statement
statement_seq statement
selection_statement :
if ( condition ) statement
if ( condition ) statement else statement
switch ( condition ) statement
condition :
expression
attribute_specifier_seq opt decl_specifier_seq declarator = initializer_clause
attribute_specifier_seq opt decl_specifier_seq declarator braced_init_list
iteration_statement :
while ( condition ) statement
do statement while ( expression ) ;
for ( for_init_statement condition opt ; expression opt ) statement
for ( for_range_declaration : for_range_initializer ) statement
for_init_statement :
expression_statement
simple_declaration
for_range_declaration :
attribute_specifier_seq opt decl_specifier_seq declarator
for_range_initializer :
expression
braced_init_list
jump_statement :
break ;
continue ;
return expression opt ;
return braced_init_list ;
goto ID ;
declaration_statement :
block_declaration

declaration_seq :
declaration
declaration_seq declaration
declaration :
block_declaration
function_definition
template_declaration
explicit_instantiation
explicit_specialization
linkage_specification
namespace_definition
empty_declaration
attribute_declaration
block_declaration :
simple_declaration
asm_definition
namespace_alias_definition
using_declaration
using_directive
static_assert_declaration
alias_declaration
opaque_enum_declaration
alias_declaration :
using ID attribute_specifier_seq opt = type_id ;
simple_declaration :
decl_specifier_seq opt init_declarator_list opt ;
attribute_specifier_seq decl_specifier_seq opt init_declarator_list ;
static_assert_declaration :
static_assert ( constant_expression ) ;
static_assert ( constant_expression , string_literal ) ;
empty_declaration :
;
attribute_declaration :
attribute_specifier_seq ;
decl_specifier :
storage_class_specifier
type_specifier
function_specifier
friend
typedef
constexpr
decl_specifier_seq :
decl_specifier attribute_specifier_seq opt
decl_specifier decl_specifier_seq
storage_class_specifier :
register
static
thread_local
extern
mutable
function_specifier :
inline
virtual
explicit
type_specifier :
trailing_type_specifier
class_specifier
enum_specifier
trailing_type_specifier :
simple_type_specifier
elaborated_type_specifier
typename_specifier
cv_qualifier
type_specifier_seq :
type_specifier attribute_specifier_seq opt
type_specifier type_specifier_seq
trailing_type_specifier_seq :
trailing_type_specifier attribute_specifier_seq opt
trailing_type_specifier trailing_type_specifier_seq
simple_type_specifier :
nested_name_specifier opt type_name
nested_name_specifier template simple_template_id
char
char16_t
char32_t
wchar_t
bool
short
int
long
signed
unsigned
float
double
void
auto
decltype_specifier
type_name :
class_name
enum_name
typedef_name
simple_template_id
decltype_specifier :
decltype ( expression )
decltype ( auto )
elaborated_type_specifier :
class_key attribute_specifier_seq opt nested_name_specifier opt ID
class_key simple_template_id
class_key nested_name_specifier template opt simple_template_id
enum nested_name_specifier opt ID
enum_specifier :
enum_head { enumerator_list opt }
enum_head { enumerator_list , }
enum_head :
enum_key attribute_specifier_seq opt ID opt enum_base opt
enum_key attribute_specifier_seq opt nested_name_specifier ID
enum_base opt
opaque_enum_declaration :
enum_key attribute_specifier_seq opt ID enum_base opt ;
enum_key :
enum
enum class
enum struct
enum_base :
: type_specifier_seq
enumerator_list :
enumerator_definition
enumerator_list , enumerator_definition
enumerator_definition :
enumerator
enumerator = constant_expression
enumerator :
ID attribute_specifier_seq opt
namespace_definition :
named_namespace_definition
unnamed_namespace_definition nested_namespace_definition
named_namespace_definition :
inline opt namespace attribute_specifier_seq opt ID { namespace_body }
unnamed_namespace_definition :
inline opt namespace attribute_specifier_seq opt { namespace_body }
nested_namespace_definition :
namespace enclosing_namespace_specifier :: ID { namespace_body }
enclosing_namespace_specifier :
ID enclosing_namespace_specifier :: ID
namespace_body :
declaration_seq opt
namespace_alias_definition :
namespace ID = qualified_namespace_specifier ;
qualified_namespace_specifier :
nested_name_specifier opt namespace_name
using_declaration :
using typename opt nested_name_specifier unqualified_id ;
using_directive :
attribute_specifier_seq opt using namespace nested_name_specifier opt namespace_name ;
asm_definition :
asm ( string_literal ) ;
linkage_specification :
extern string_literal { declaration_seq opt }
extern string_literal declaration
attribute_specifier_seq :
attribute_specifier_seq opt attribute_specifier
attribute_specifier :
[ [ attribute_list ] ]
alignment_specifier
alignment_specifier :
alignas ( type_id ... opt )
alignas ( constant_expression ... opt )
attribute_list :
attribute opt
attribute_list , attribute opt
attribute ...
attribute_list , attribute ...
attribute :
attribute_token attribute_argument_clause opt
attribute_token :
ID
attribute_scoped_token
attribute_scoped_token :
attribute_namespace :: ID
attribute_namespace :
ID
attribute_argument_clause :
( balanced_token_seq )
balanced_token_seq :
balanced_token opt
balanced_token_seq balanced_token
balanced_token :
( balanced_token_seq )
[ balanced_token_seq ]
{ balanced_token_seq }

init_declarator_list :
init_declarator
init_declarator_list , init_declarator
init_declarator :
declarator initializer opt
declarator :
ptr_declarator
noptr_declarator parameters_and_qualifiers trailing_return_type
ptr_declarator :
noptr_declarator
ptr_operator ptr_declarator
noptr_declarator :
( ptr_declarator )
declarator_id attribute_specifier_seq opt
noptr_declarator parameters_and_qualifiers
noptr_declarator [ constant_expression opt ] attribute_specifier_seq opt
parameters_and_qualifiers :
( parameter_declaration_clause ) cv_qualifier_seq opt
ref_qualifier opt exception_specification opt attribute_specifier_seq opt
trailing_return_type :
-> trailing_type_specifier_seq abstract_declarator opt
ptr_operator :
* attribute_specifier_seq opt cv_qualifier_seq opt
& attribute_specifier_seq opt
&& attribute_specifier_seq opt
nested_name_specifier * attribute_specifier_seq opt cv_qualifier_seq opt
cv_qualifier_seq :
cv_qualifier cv_qualifier_seq opt
cv_qualifier :
const
volatile
ref_qualifier :
&
&&
declarator_id :
... opt id_expression
type_id :
type_specifier_seq abstract_declarator opt
abstract_declarator :
ptr_abstract_declarator
noptr_abstract_declarator opt parameters_and_qualifiers trailing_return_type
abstract_pack_declarator
ptr_abstract_declarator :
noptr_abstract_declarator
ptr_operator ptr_abstract_declarator opt
noptr_abstract_declarator :
noptr_abstract_declarator opt parameters_and_qualifiers
noptr_abstract_declarator opt [ constant_expression opt ] attribute_specifier_seq opt
( ptr_abstract_declarator )
abstract_pack_declarator :
noptr_abstract_pack_declarator
ptr_operator abstract_pack_declarator
noptr_abstract_pack_declarator :
noptr_abstract_pack_declarator parameters_and_qualifiers
noptr_abstract_pack_declarator [ constant_expression opt ] attribute_specifier_seq opt
...
parameter_declaration_clause :
parameter_declaration_list opt ... opt
parameter_declaration_list , ...
parameter_declaration_list :
parameter_declaration
parameter_declaration_list , parameter_declaration
parameter_declaration :
attribute_specifier_seq opt decl_specifier_seq declarator
attribute_specifier_seq opt decl_specifier_seq declarator = initializer_clause
attribute_specifier_seq opt decl_specifier_seq abstract_declarator opt
attribute_specifier_seq opt decl_specifier_seq abstract_declarator opt = initializer_clause
function_definition :
attribute_specifier_seq opt decl_specifier_seq opt declarator virt_specifier_seq opt function_body
function_body :
ctor_initializer opt compound_statement
function_try_block
= default ;
= delete ;
initializer :
brace_or_equal_initializer
( expression_list )
brace_or_equal_initializer :
= initializer_clause
braced_init_list
initializer_clause :
assignment_expression
braced_init_list
initializer_list :
initializer_clause ... opt
initializer_list , initializer_clause ... opt
braced_init_list :
{ initializer_list , opt }
{ }

simple_template_id
class_specifier :
class_head { member_specification opt }
class_head :
class_key attribute_specifier_seq opt class_head_name class_virt_specifier opt base_clause opt
class_key attribute_specifier_seq opt base_clause opt
class_head_name :
nested_name_specifier opt class_name
class_virt_specifier :
final
class_key :
class
struct
union
member_specification :
member_declaration member_specification opt
access_specifier : member_specification opt
member_declaration :
attribute_specifier_seq opt decl_specifier_seq opt member_declarator_list opt ;
function_definition
using_declaration
static_assert_declaration
template_declaration
alias_declaration
empty_declaration
member_declarator_list :
member_declarator
member_declarator_list , member_declarator
member_declarator :
declarator virt_specifier_seq opt pure_specifier opt
declarator brace_or_equal_initializer opt
ID opt attribute_specifier_seq opt : constant_expression
virt_specifier_seq :
virt_specifier
virt_specifier_seq virt_specifier
virt_specifier :
override
final
pure_specifier :
= zero 
base_clause :
: base_specifier_list
base_specifier_list :
base_specifier ... opt
base_specifier_list , base_specifier ... opt
base_specifier :
attribute_specifier_seq opt base_type_specifier
attribute_specifier_seq opt virtual access_specifier opt base_type_specifier
attribute_specifier_seq opt access_specifier virtual opt base_type_specifier
class_or_decltype :
nested_name_specifier opt class_name
decltype_specifier
base_type_specifier :
class_or_decltype
access_specifier :
private
protected
public
conversion_function_id :
operator conversion_type_id
conversion_type_id :
type_specifier_seq conversion_declarator opt
conversion_declarator :
ptr_operator conversion_declarator opt
ctor_initializer :
: mem_initializer_list
mem_initializer_list :
mem_initializer ... opt
mem_initializer_list , mem_initializer ... opt
mem_initializer :
mem_initializer_id ( expression_list opt )
mem_initializer_id braced_init_list
mem_initializer_id :
class_or_decltype
ID

operator_function_id :
operator operator
operator_ :
new
delete
new[]
delete[]
+
-
*
/
%
^
&
|
~
!
=
<
>
+=
-=
*=
/=
%=
^=
&=
|=
<<
>>
>>=
<<=
==
!=
<=
>=
&&
||
++
--
,
->*
->
(
)
[
]
literal_operator_id :
operator string_literal ID
operator user_defined_string_literal
string_literal :
STR
user_defined_string_literal :
STR

template_declaration :
template < template_parameter_list > declaration
template_parameter_list :
template_parameter
template_parameter_list , template_parameter
template_parameter :
type_parameter
parameter_declaration
type_parameter :
type_parameter_key ... opt ID opt
type_parameter_key ID opt = type_id
template < template_parameter_list > type_parameter_key ... opt ID opt
template < template_parameter_list > type_parameter_key ID opt = id_expression
type_parameter_key :
class
typename
simple_template_id :
template_name < template_argument_list opt >
template_id :
simple_template_id
operator_function_id < template_argument_list opt >
literal_operator_id < template_argument_list opt >
template_argument_list :
template_argument ... opt
template_argument_list , template_argument ... opt
template_argument :
constant_expression
type_id
id_expression
typename_specifier :
typename nested_name_specifier ID
typename nested_name_specifier template opt simple_template_id
explicit_instantiation :
extern opt template declaration
explicit_specialization :
template < > declaration

try_block :
try compound_statement handler_seq
function_try_block :
try ctor_initializer opt compound_statement handler_seq
handler_seq :
handler handler_seq opt
handler :
catch ( exception_declaration ) compound_statement
exception_declaration :
attribute_specifier_seq opt type_specifier_seq declarator
attribute_specifier_seq opt type_specifier_seq abstract_declarator opt
...
exception_specification :
dynamic_exception_specification
noexcept_specification
dynamic_exception_specification :
throw ( type_id_list opt )
type_id_list :
type_id ... opt
type_id_list , type_id ... opt
noexcept_specification :
noexcept ( constant_expression )
noexcept
