primary_expression :
	literal
	this
	( expression )
	id_expression
	lambda_expression
	fold_expression
id_expression :
	unqualified_id
	qualified_id
unqualified_id :
	id
	operator_function_id
	conversion_function_id
	literal_operator_id
	~ class_name
	~ decltype_specifier
	template_id
qualified_id :
	nested_name_specifier template opt unqualified_id
nested_name_specifier :
	::
	type_name ::
	namespace_name ::
	decltype_specifier ::
	nested_name_specifier id ::
	nested_name_specifier template opt simple_template_id ::
lambda_expression :
	lambda_introducer lambda_declarator opt compound_statement
lambda_introducer :
	[ lambda_capture opt ]
lambda_capture :
	capture_default
	capture_list
	capture_default , capture_list
capture_default :
	&=
capture_list :
	capture ... opt
	capture_list , capture ... opt
capture :
	simple_capture
	init_capture
simple_capture :
	id
	& id
	this
init_capture :
	id initializer
	& id initializer
lambda_declarator :
	( parameter_declaration_clause ) mutable opt
	exception_specification opt attribute_specifier_seq opt trailing_return_type opt
fold_expression :
	( cast_expression fold_operator ... )
	( ... fold_operator cast_expression )
	( cast_expression fold_operator ... fold_operator cast_expression )
fold_operator :
	+
	-
	*
	/
	%
	^
	&
	|
	<<
	>>
	+=
	-=
	*=
	/=
	%=
	^=
	&=
	|=
	<<=
	>>=
	=
	==
	!=
	<
	>
	<=
	>=
	&&
	||
	,
	.*
	->*
postfix_expression :
	primary_expression
	simple_type_specifier ( expression_list opt )
	typename_specifier ( expression_list opt )
	simple_type_specifier braced_init_list
	typename_specifier braced_init_list
	dynamic_cast < type_id > ( expression )
	static_cast < type_id > ( expression )
	reinterpret_cast < type_id > ( expression )
	const_cast < type_id > ( expression )
	typeid ( expression )
	typeid ( type_id )
	postfix_expression [ expression ]
	postfix_expression [ braced_init_list ]
	postfix_expression ( expression_list opt )
	postfix_expression . template opt id_expression
	postfix_expression -> template opt id_expression
	postfix_expression . pseudo_destructor_name
	postfix_expression -> pseudo_destructor_name
	postfix_expression ++
	postfix_expression -- 
expression_list :
	initializer_list
pseudo_destructor_name :
	nested_name_specifier opt type_name :: ~ type_name
	nested_name_specifier template simple_template_id :: ~ type_name
	~ type_name
	~ decltype_specifier
unary_expression :
	postfix_expression
	++ cast_expression
	-- cast_expression
	unary_operator cast_expression
	sizeof ( type_id )
	sizeof ... ( id )
	alignof ( type_id )
	noexcept_expression
	new_expression
	delete_expression
	sizeof unary_expression
unary_operator :
	*
	&
	+
	-
	!
	~
new_expression :
	:: opt new new_placement opt new_type_id new_initializer opt
	:: opt new new_placement opt ( type_id ) new_initializer opt
new_placement :
	( expression_list )
new_type_id :
	type_specifier_seq
	type_specifier_seq new_declarator
new_declarator :
	ptr_operator new_declarator opt
	noptr_new_declarator
noptr_new_declarator :
	[ expression ] attribute_specifier_seq opt
	noptr_new_declarator [ constant_expression ] attribute_specifier_seq opt
new_initializer :
	( expression_list opt )
	braced_init_list
delete_expression :
	:: opt delete cast_expression
	:: opt delete [ ] cast_expression
noexcept_expression :
	noexcept ( expression )
cast_expression :
	unary_expression
	( type_id ) cast_expression
pm_expression :
	cast_expression
	pm_expression .* cast_expression
	pm_expression ->* cast_expression
multiplicative_expression :
	pm_expression
	multiplicative_expression * pm_expression
	multiplicative_expression / pm_expression
	multiplicative_expression % pm_expression
additive_expression :
	multiplicative_expression
	additive_expression + multiplicative_expression
	additive_expression - multiplicative_expression
shift_expression :
	additive_expression
	shift_expression << additive_expression
	shift_expression >> additive_expression
relational_expression :
	shift_expression
	relational_expression < shift_expression
	relational_expression > shift_expression
	relational_expression <= shift_expression
	relational_expression >= shift_expression
equality_expression :
	relational_expression
	equality_expression == relational_expression
	equality_expression != relational_expression
and_expression :
	equality_expression
	and_expression & equality_expression
exclusive_or_expression :
	and_expression
	exclusive_or_expression ^ and_expression
inclusive_or_expression :
exclusive_or_expression
	inclusive_or_expression | exclusive_or_expression
logical_and_expression :
	inclusive_or_expression
	logical_and_expression && inclusive_or_expression
logical_or_expression :
	logical_and_expression
	logical_or_expression || logical_and_expression
conditional_expression :
	logical_or_expression
logical_or_expression ? expression : assignment_expression
	throw_expression :
		throw assignment_expression opt
assignment_expression :
	conditional_expression
	logical_or_expression assignment_operator initializer_clause
	throw_expression
assignment_operator :
	=
	*=
	/=
	%=
	+=
	-=
	>>=
	<<=
	&=
	^=
	|=
expression :
	assignment_expression
	expression , assignment_expression
constant_expression :
	conditional_expression
