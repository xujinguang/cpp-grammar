void primary_expression(int tab, leaf_t &leaf);
void id_expression(int tab, leaf_t &leaf);
void unqualified_id(int tab, leaf_t &leaf);
void qualified_id(int tab, leaf_t &leaf);
void nested_name_specifier(int tab, leaf_t &leaf, int source);
void lambda_expression(int tab, leaf_t &leaf);
void lambda_introducer(int tab, leaf_t &leaf);
void lambda_capture(int tab, leaf_t &leaf);
void capture_default(int tab, leaf_t &leaf);
void capture_list(int tab, leaf_t &leaf);
void capture(int tab, leaf_t &leaf);
void simple_capture(int tab, leaf_t &leaf);
void init_capture(int tab, leaf_t &leaf);
void lambda_declarator(int tab, leaf_t &leaf);
void fold_expression(int tab, leaf_t &leaf);
void fold_operator(int tab, leaf_t &leaf);
void postfix_expression(int tab, leaf_t &leaf, int source);
void expression_list(int tab, leaf_t &leaf);
void pseudo_destructor_name(int tab, leaf_t &leaf);
void unary_expression(int tab, leaf_t &leaf);
void unary_operator(int tab, leaf_t &leaf);
void new_expression(int tab, leaf_t &leaf);
void new_placement(int tab, leaf_t &leaf);
void new_type_id(int tab, leaf_t &leaf);
void new_declarator(int tab, leaf_t &leaf);
void noptr_new_declarator(int tab, leaf_t &leaf);
void new_initializer(int tab, leaf_t &leaf);
void delete_expression(int tab, leaf_t &leaf);
void noexcept_expression(int tab, leaf_t &leaf);
void cast_expression(int tab, leaf_t &leaf);
void pm_expression(int tab, leaf_t &leaf, int source);
void multiplicative_expression(int tab, leaf_t &leaf, int source);
void additive_expression(int tab, leaf_t &leaf, int source);
void shift_expression(int tab, leaf_t &leaf, int source);
void relational_expression(int tab, leaf_t &leaf, int source);
void equality_expression(int tab, leaf_t &leaf, int source);
void and_expression(int tab, leaf_t &leaf);
void exclusive_or_expression(int tab, leaf_t &leaf);
void inclusive_or_expression(int tab, leaf_t &leaf);
void logical_and_expression(int tab, leaf_t &leaf);
void logical_or_expression(int tab, leaf_t &leaf);
void conditional_expression(int tab, leaf_t &leaf);
void throw_expression(int tab, leaf_t &leaf);
void assignment_expression(int tab, leaf_t &leaf);
void assignment_operator(int tab, leaf_t &leaf);
static void expression(int tab, leaf_t &leaf);
static void constant_expression(int tab, leaf_t &leaf);
void attribute_specifier_seq(int tab, leaf_t &leaf);
void braced_init_list(int tab, leaf_t &leaf);
void class_name(int tab, leaf_t &leaf);
void compound_statement(int tab, leaf_t &leaf);
void conversion_function_id(int tab, leaf_t &leaf);
void decltype_specifier(int tab, leaf_t &leaf);
void exception_specification(int tab, leaf_t &leaf);
void initializer(int tab, leaf_t &leaf);
void initializer_clause(int tab, leaf_t &leaf);
void initializer_list(int tab, leaf_t &leaf);
void literal_operator_id(int tab, leaf_t &leaf);
void namespace_name(int tab, leaf_t &leaf);
void operator_function_id(int tab, leaf_t &leaf);
void parameter_declaration_clause(int tab, leaf_t &leaf);
void ptr_operator(int tab, leaf_t &leaf);
static void simple_template_id(int tab, leaf_t &leaf);
void simple_type_specifier(int tab, leaf_t &leaf);
void template_id(int tab, leaf_t &leaf);
void trailing_return_type(int tab, leaf_t &leaf);
void type_id(int tab, leaf_t &leaf);
void type_name(int tab, leaf_t &leaf);
void type_specifier_seq(int tab, leaf_t &leaf);
void typename_specifier(int tab, leaf_t &leaf);
